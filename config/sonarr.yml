apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sonarr
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      volumes:
      # sonarr config files (stored on USB stick on pi)
      - name: nfs-sonarr
        nfs: 
          server: 10.1.1.9
          path: /media/NFS/sonarr-config

      # Downloaded Files
      - name: nfs-downloads
        nfs: 
          server: 10.1.1.9
          path: /media/nzbget-k8s

      # TV Files
      - name: nfs-tv
        nfs: 
          server: 10.1.1.9
          path: /media/TV/TV
      containers:
      - name: sonarr
        image: linuxserver/sonarr:latest
        # imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8989
        env:
        - name: PGID
          value: "1000"
        - name: PUID
          value: "1000"
        - name: TZ
          value: Australia/Sydney
        volumeMounts:
        - name: nfs-sonarr
          mountPath: /config
        - name: nfs-downloads
          mountPath: /downloads
        - name: nfs-tv
          mountPath: /tv
        readinessProbe:
          httpGet:
            path: /api/system/status?apikey=healthcheck
            port: 8989
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /api/system/status?apikey=healthcheck
            port: 8989
          initialDelaySeconds: 30
          periodSeconds: 5
        resources:
          requests:
            memory: "350Mi"
            cpu: "1200m"
          limits:
            memory: "400Mi"
            cpu: "2000m"
---
apiVersion: v1
kind: Service
metadata:
  name: sonarr
  labels:
    app: sonarr
    kubernetes.io/name: "sonarr"
spec:
  type: LoadBalancer
  selector:
    app: sonarr
  ports:
  - name: sonarr
    port: 80
    targetPort: 8989